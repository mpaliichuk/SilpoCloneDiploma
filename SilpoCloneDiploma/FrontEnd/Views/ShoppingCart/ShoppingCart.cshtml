@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="~/css/pagesStyles/mainPage.css" asp-append-version="true" />
<style>
    .cart-container {
        width: 874px;
        height: 785px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 28px;
    }

    .cart-header {
        width: 100%;
        height: 54px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-left: 367px;
    }

    .cart-title {
        font-size: 40px;
        font-family: 'Noto Sans', sans-serif;
        font-weight: 500;
        color: #1E1E1E;
    }

    .cart-clear {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-left: 580px;
    }

    .cart-icon {
        padding-right: 550px;
        width: 24px;
        height: 24px;
    }

    .cart-clear-text {
        font-size: 14px;
        font-family: 'Noto Sans', sans-serif;
        font-weight: 400;
        color: #1E1E1E;
        white-space: nowrap;
    }

    .free-delivery-message {
        width: 100%;
        padding: 16px 16px 16px 28px;
        background: #4CAF50;
        border-radius: 30px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .free-delivery-text {
        font-size: 18px;
        font-family: 'Noto Sans', sans-serif;
        color: white;
    }

    .free-delivery-bold {
        font-weight: 700;
    }

    .cart-items {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 28px;

    }

    .cart-item {
        width: 100%;
        height: 100px;
        padding: 8px 32px;
        border-radius: 36px;
        border: 1px solid #CBCBCB;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .item-image {
        width: 50px;
        height: 50px;
    }

    .item-name {
        width: auto;
        max-width: 203px;
        font-size: 16px;
        font-family: 'Noto Sans', sans-serif;
        font-weight: 600;
        color: #1E1E1E;
        word-wrap: break-word;
    }

    .item-quantity {
        display: flex;
        align-items: center;
        gap: 21px;
    }

    .item-price,
    .item-total {
        font-size: 16px;
        font-family: 'Noto Sans', sans-serif;
        color: #1E1E1E;
        text-align: right;
        white-space: nowrap;
    }

    .item-price {
        font-weight: 400;
    }

    .item-total {
        font-weight: 600;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .quantity-button {
        width: 24px;
        height: 24px;
        padding: 6px;
        background: #FF5722;
        border-radius: 3.6px;
        border: none;
        display: flex;
        justify-content: center;
        align-items: center;
        color: #FFFFFF;
        font-size: 16px;
        font-family: Noto Sans;
        font-weight: 500;
    }

    .quantity-button * {
        color: inherit;
    }

    .quantity-text {
        font-size: 16px;
        font-family: 'Noto Sans', sans-serif;
        font-weight: 500;
        color: #757575;
        text-align: center;
        white-space: nowrap;
    }

    .quantity-unit {
        font-size: 16px;
        font-family: 'Noto Sans', sans-serif;
        font-weight: 500;
        color: #757575;
        margin-right: 8px;
        white-space: nowrap;
    }

    .remove-item {
        width: 91px;
        height: 26px;
        padding: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .remove-icon {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        padding: 8px;
        gap: 10px;
        width: 91px;
        height: 26px;
        background: transparent;
        font-size: 16px;
        font-family: Noto Sans;
        color: #1E1E1E;
        text-align: center;
        line-height: 26px;
    }

    .Frame427318630 {
        width: 428px;
        height: 708px;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 28px;
        display: inline-flex;
    }

    .Promo,
    .Certificate {
        align-self: stretch;
        height: 58px;
        padding: 16px 28px;
        background: #FF5722;
        border-radius: 36px;
        justify-content: space-between;
        align-items: center;
        display: inline-flex;
    }

    .Promo {
        margin-top: 12.5%;
    }

    .PromoTitle,
    .CertificateTitle {
        width: 203px;
        color: #FFFEFE;
        font-size: 16px;
        font-family: Noto Sans;
        font-weight: 700;
        word-wrap: break-word;
    }

    .PromoActions,
    .CertificateActions {
        justify-content: flex-start;
        align-items: center;
        gap: 4px;
        display: flex;
    }

    .ActionIcon {
        padding: 8px;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
        display: flex;
    }

    .Vector {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        padding: 8px;
        gap: 10px;
        width: 32px;
        height: 32px;
        flex: none;
        order: 0;
        flex-grow: 0;
        background-color: transparent;
    }

    .Vector::before {
        content: "+";
        font-size: 24px;
        color: #fff;
        font-family: Noto Sans;
    }

    .ActionText {
        color: #FFFEFE;
        font-size: 16px;
        font-family: Noto Sans;
        font-weight: 500;
        word-wrap: break-word;
    }

    .CertificateDetails {
        align-self: stretch;
        height: 536px;
        padding: 28px;
        border-radius: 36px;
        border: 3px #FF5722 solid;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        gap: 32px;
        display: flex;
    }

    .Detail {
        align-self: stretch;
        justify-content: space-between;
        align-items: center;
        display: inline-flex;
    }

    .DetailLabel {
        width: 240px;
        color: #1E1E1E;
        font-size: 16px;
        font-family: Noto Sans;
        font-weight: 400;
        word-wrap: break-word;
    }

    .DetailValue {
        text-align: right;
        color: #1E1E1E;
        font-size: 16px;
        font-family: Noto Sans;
        font-weight: 600;
        word-wrap: break-word;
    }

    .DetailValue.total {
        font-size: 20px;
    }

    .AdditionalInfo {
        align-self: stretch;
        height: 313px;
        padding-top: 40px;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 28px;
        display: flex;
    }

    .InfoContent {
        align-self: stretch;
        height: 199px;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 20px;
        display: flex;
    }

    .InfoTitle {
        align-self: stretch;
        height: 22px;
        color: #1E1E1E;
        font-size: 16px;
        font-family: Noto Sans;
        font-weight: 600;
        word-wrap: break-word;
    }

    .InfoComment {
        align-self: stretch;
        padding: 20px;
        border-radius: 4px;
        border: 1px #CBCBCB solid;
        color: #757575;
        font-size: 14px;
        font-family: Noto Sans;
        font-weight: 400;
        word-wrap: break-word;
    }

    .PromoNext {
        align-self: stretch;
        padding: 12px;
        background: #FF5722;
        border-radius: 36px;
        border: 2px #FFFEFE solid;
        justify-content: space-between;
        align-items: center;
        display: inline-flex;
        cursor: pointer;
    }

    .NextText {
        width: 310px;
        height: 22px;
        text-align: center;
        color: #FFFEFE;
        font-size: 16px;
        font-family: Noto Sans;
        font-weight: 600;
        word-wrap: break-word;
    }

    .content {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        gap: 10%;
        min-height: 100vh;
        height: auto;
        padding: 20px;
        box-sizing: border-box;
        margin-bottom: 100px;
    }

    .cart-container,
    .certificate {
        width: 50%;
        display: flex;
        flex-direction: column;
        gap: 20px;
        height: auto;
    }

    .cart-header,
    .cart-items,
    .info-row,
    .comments-and-promo {
        margin-bottom: 20px;
    }
</style>

<div class="content">
    <div class="cart-container">
        <div class="cart-header">
            <div class="cart-title">Кошик</div>
        </div>
        <div class="free-delivery-message">
            <div class="free-delivery-text">Безкоштовна доставка на суму від <span class="free-delivery-bold">1299
                    грн</span></div>
        </div>
        <div class="cart-clear" id="clear-cart-button">
            <div class="cart-clear-text">Очистити кошик</div>
            <div class="cart-icon">
                <img src="~/icons/solar_cart-3-outline.png" alt="Clear Cart" />
            </div>
        </div>
        <div class="cart-items" id="cart-items">
            <!-- Cart items will be dynamically inserted here -->
        </div>
    </div>
    <div class="Frame427318630">
        <div class="Promo">
            <div class="PromoTitle">Промокод</div>
            <div class="PromoActions">
                <div class="ActionIcon">
                    <div class="Vector"></div>
                </div>
                <div class="ActionText">Додати</div>
            </div>
        </div>
        <div class="Certificate">
            <div class="CertificateTitle">Сертифікат</div>
            <div class="CertificateActions">
                <div class="ActionIcon">
                    <div class="Vector"></div>
                </div>
                <div class="ActionText">Додати</div>
            </div>
        </div>
        <div class="CertificateDetails">
            <div class="Detail">
                <div class="DetailLabel">Доставка:</div>
                <div class="DetailValue" id="deliveryCost">69,00 грн</div>
            </div>
            <div class="Detail">
                <div class="DetailLabel">Вага з супутнім пакованням:</div>
                <div class="DetailValue" id="totalWeight">1,76 кг</div>
            </div>
            <div class="Detail">
                <div class="DetailLabel">Всього:</div>
                <div class="DetailValue total" id="totalPrice">402,00 грн</div>
            </div>
            <div class="AdditionalInfo">
                <div class="InfoContent">
                    <div class="InfoTitle">Коментар до замовлення</div>
                    <textarea class="InfoComment"
                        placeholder="Тут ви можете залишити свої побажання щодо окремих товарів, усього замовлення, пакування тощо."
                        rows="4"></textarea>
                </div>
                <div class="PromoNext" onclick="goToOrder()">
                    <div class="NextText">Далі</div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    let cart = JSON.parse(localStorage.getItem('cart')) || { cartHeader: {}, cartDetails: [] };

    document.getElementById('clear-cart-button').addEventListener('click', clearCart);
    function goToOrderPage() {
        window.location.href = '/Goodmeal/User/Order';
    }
    async function clearCart() {
        try {
            const response = await fetch(`http://localhost:5152/gateway/RemoveCart/${localStorage.userId}`, {
                method: 'POST'
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            if (data.isSuccess) {
                document.querySelectorAll('.cart-item').forEach(item => item.remove());
                cart = { cartHeader: {}, cartDetails: [] };
                localStorage.setItem('cart', JSON.stringify(cart));
                updateCertificateDetails();
            } else {
                console.error('Error clearing cart:', data.message);
            }
        } catch (error) {
            console.error('Error clearing cart:', error);
        }
    }

    async function removeItem(itemId) {
        try {
            const response = await fetch(`http://localhost:5152/gateway/RemoveCartDetails/${itemId}`, {
                method: 'POST'
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            if (data.isSuccess) {
                const itemIndex = cart.cartDetails.findIndex(detail => detail.cartDetailsId == itemId);
                if (itemIndex > -1) {
                    cart.cartDetails.splice(itemIndex, 1);
                    localStorage.setItem('cart', JSON.stringify(cart));
                    document.querySelector(`.cart-item[data-id="${itemId}"]`).remove();
                    updateCertificateDetails();
                }
            } else {
                console.error('Error removing cart item:', data.message);
            }
        } catch (error) {
            console.error('Error removing cart item:', error);
        }
    }

    function updateCartItemDisplay(itemId) {
        const item = cart.cartDetails.find(detail => detail.cartDetailsId == itemId);
        if (!item) return;

        const cartItemElement = document.querySelector(`.cart-item[data-id="${itemId}"]`);
        if (!cartItemElement) return;

        const quantityText = cartItemElement.querySelector('.quantity-text');
        const itemTotal = cartItemElement.querySelector('.item-total');
        const quantityUnit = cartItemElement.querySelector('.quantity-unit');

        quantityText.textContent = `${item.totalWeight.toFixed(1)} кг`;
        itemTotal.textContent = `${(item.totalWeight * item.pricePerKg).toFixed(2)} грн`;
        quantityUnit.textContent = `${(item.totalWeight * 1000).toFixed(0)} г`;

        updateCertificateDetails();
    }

    function updateCertificateDetails() {
        let totalWeight = 0;
        let totalPrice = 0;

        cart.cartDetails.forEach(item => {
            totalWeight += item.totalWeight;
            totalPrice += item.totalWeight * item.pricePerKg;
        });

        document.getElementById('totalWeight').textContent = `${totalWeight.toFixed(2)} кг`;
        document.getElementById('totalPrice').textContent = `${totalPrice.toFixed(2)} грн`;

        if (totalWeight === 0 && totalPrice === 0) {
            document.getElementById('totalWeight').textContent = `0.00 кг`;
            document.getElementById('totalPrice').textContent = `0.00 грн`;
        }
    }

    async function upsertCartItemInDb(cartHeaderId, cartDetailsId, productId, count) {
        try {
            const response = await fetch(`http://localhost:5152/gateway/AddToCart`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    cartHeader: {
                        cartHeaderId: cartHeaderId,
                        userId: localStorage.userId
                    },
                    cartDetails: [
                        {
                            cartDetailsId: cartDetailsId,
                            cartHeaderId: cartHeaderId,
                            productId: productId,
                            count: count
                        }
                    ]
                })
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            if (!data.isSuccess) {
                console.error('Error upserting cart item:', data.message);
            }
        } catch (error) {
            console.error('Error upserting cart item:', error);
        }
    }

    function incrementQuantity(itemId) {
        const item = cart.cartDetails.find(detail => detail.cartDetailsId == itemId);
        if (item && item.count < 100) {
            item.count += 1;
            item.totalWeight = item.product.weight * item.count;
            updateCartItemDisplay(itemId);
            upsertCartItemInDb(cart.cartHeader.cartHeaderId, item.cartDetailsId, item.productId, 1);
        }
    }

    function decrementQuantity(itemId) {
        const item = cart.cartDetails.find(detail => detail.cartDetailsId == itemId);
        if (item && item.count > 1) {
            item.count -= 1;
            item.totalWeight = item.product.weight * item.count;
            updateCartItemDisplay(itemId);
            upsertCartItemInDb(cart.cartHeader.cartHeaderId, item.cartDetailsId, item.productId, -1);
        }
    }

    async function fetchCartItems() {
        try {
            const response = await fetch(`http://localhost:5152/gateway/GetUserCart/${localStorage.userId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            if (data.isSuccess) {
                cart = {
                    cartHeader: data.result.cartHeader,
                    cartDetails: data.result.cartDetails.map(detail => ({
                        ...detail,
                        name: detail.product.title,
                        totalWeight: detail.product.weight * detail.count,
                        pricePerKg: detail.product.price,
                        imageUrl: detail.product.imageUrls[0]
                    }))
                };
                localStorage.setItem('cart', JSON.stringify(cart));
                renderCartItems();
                updateCertificateDetails();
            } else {
                console.error('Error fetching cart items:', data.message);
            }
        } catch (error) {
            console.error('Error fetching cart items:', error);
        }
    }

    function renderCartItems() {
        const cartItemsContainer = document.getElementById('cart-items');
        cartItemsContainer.innerHTML = '';

        for (let item of cart.cartDetails) {
            const cartItemElement = document.createElement('div');
            cartItemElement.className = 'cart-item';
            cartItemElement.dataset.id = item.cartDetailsId;
            cartItemElement.innerHTML = `
                <img class="item-image" src="${item.imageUrl}" alt="${item.name}" />
                <div class="item-name">${item.name}</div>
                <div class="item-quantity">
                    <div class="quantity-unit">${(item.totalWeight * 1000).toFixed(0)} г</div>
                    <div class="item-price">${item.pricePerKg.toFixed(2)} грн</div>
                    <div class="quantity-control">
                        <div class="quantity-button" onclick="incrementQuantity('${item.cartDetailsId}')">+</div>
                        <div class="quantity-text">${item.totalWeight.toFixed(1)} кг</div>
                        <div class="quantity-button" onclick="decrementQuantity('${item.cartDetailsId}')">-</div>
                    </div>
                    <div class="item-total">${(item.totalWeight * item.pricePerKg).toFixed(2)} грн</div>
                    <div class="remove-item">
                        <div class="remove-icon" onclick="removeItem('${item.cartDetailsId}')">X</div>
                    </div>
                </div>
            `;
            cartItemsContainer.appendChild(cartItemElement);
        }
    }

    document.addEventListener('DOMContentLoaded', fetchCartItems);


</script>